#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import base_handler
import math
import random
import json
import logging


class SimpleMath(base_handler.BaseHandler):
  # Description   - A description of a cache system. (ex: '64KB, 2-way set 
  #                 associative cache with 64byte blocks. The addresses are 40 
  #                 bits)
  # Components    - The components of an address, aka the Tag, Index, and Block
  #                 offset
  # Hit/Miss      - Given a cache description and a set of addresses, which
  #                 addresses are cache hits and which are cache misses
  # Code          - Some random C code loop
  # Address       - Addresses generated by the code loop
  valid_types = [
    "simplemath",    # Description to Components
  ]
  def data_for_question(self,question_type):
		numb1 = self.generator.randint(1,100)
		numb2 = self.generator.randint(1,100)
		swag1 = random.choice(['swwwwaaaag','swag'])
		swag2 = random.choice(['swaaag','swwwag'])
		numbs = numb1+numb2
		hella = 4
		description = [	'What is the sum of ' + str(numb1) + ' and ' + str(numb2) + '? ' +'Also what is the sum of '+ swag1 + ' and '+ swag2]
		return {"description":description,"numbs" : numbs,"hella":hella}
  def score_student_answer(self,question_type,question_data,student_answer):
      wanted = self.get_description_string(question_data)
      if wanted == student_answer:
        return (100.0, wanted)
      else:
        return (0.0,wanted)
  def get_description_string(self,description):
    return "%i,%i" % (description['numbs'],description['hella'])
